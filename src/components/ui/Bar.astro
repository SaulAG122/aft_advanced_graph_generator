---
interface Props {
  value: number;
  color: string;
  percentage: number;
  class?: string;
}

const { value, color, percentage, class: className = "" } = Astro.props;

const bgColor = color.split(" ").find((c) => c.startsWith("bg-")) || "";
const borderColor = color.split(" ").find((c) => c.startsWith("border-")) || "";

const widthClasses = {
  0: "w-0",
  10: "w-[5%]",
  20: "w-[17.5%]",
  30: "w-[27.5%]",
  40: "w-[37.5%]",
  50: "w-[47.5%]",
  60: "w-[57.5%]",
  70: "w-[67.7%]",
  80: "w-[77.5%]",
  90: "w-[87.5%]",
  100: "w-full",
};

const roundedPercentage = Math.round(percentage / 10) * 10;
const widthClass =
  widthClasses[roundedPercentage as keyof typeof widthClasses] || "w-0";
---

<div class:list={["w-full"]}>
  <div class:list={["flex", "items-center", "gap-2"]}>
    <div class:list={["flex-1", "relative"]}>
      <div class:list={["w-full", "bg-gray-200", "rounded-lg", "h-8"]}>
        <div
          class:list={[
            "h-full",
            "rounded-md",
            "transition-all",
            "duration-500",
            "ease-out",
            "relative",
            "z-10",
            bgColor,
            widthClass,
          ]}
        >
          <div
            class:list={[
              "absolute",
              "right-0",
              "top-1/2",
              "-translate-y-1/2",
              "bg-white",
              "px-2",
              "py-2",
              "text-black",
              "font-bold",
              "text-sm",
              "rounded-md",
              "border-4",
              "z-20",
              borderColor,
            ]}
          >
            {value}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
